package quiz.app;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.sql.*;public class Login extends JFrame implements ActionListener {    JTextField nameField, emailField;    JButton next, back;    // Database credentials    private static final String DB_URL = "jdbc:mysql://localhost:3306/quiz_application";    private static final String DB_USER = "root";    private static final String DB_PASSWORD = "";    Login() {        getContentPane().setBackground(Color.WHITE);        setLayout(null);        // Image        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/login.png"));        Image i = i1.getImage().getScaledInstance(550, 500, Image.SCALE_DEFAULT);        ImageIcon i2 = new ImageIcon(i);        JLabel image = new JLabel(i2);        image.setBounds(450, 0, 550, 500);        add(image);        // Heading        JLabel heading = new JLabel("QUIZ TEST");        heading.setBounds(120, 60, 300, 45);        heading.setFont(new Font("Viner Hand ITC", Font.BOLD, 40));        heading.setForeground(new Color(22, 99, 54));        add(heading);        // Name Label        JLabel nameLabel = new JLabel("Enter Your Name");        nameLabel.setBounds(160, 150, 300, 20);        nameLabel.setFont(new Font("Mongolian Baiti", Font.BOLD, 18));        nameLabel.setForeground(new Color(22, 99, 54));        add(nameLabel);        // Name Field        nameField = new JTextField();        nameField.setBounds(80, 200, 300, 25);        nameField.setFont(new Font("Times New Roman", Font.BOLD, 18));        add(nameField);        // Email Label        JLabel emailLabel = new JLabel("Enter Your Email");        emailLabel.setBounds(160, 250, 300, 20);        emailLabel.setFont(new Font("Mongolian Baiti", Font.BOLD, 18));        emailLabel.setForeground(new Color(22, 99, 54));        add(emailLabel);        // Email Field        emailField = new JTextField();        emailField.setBounds(80, 300, 300, 25);        emailField.setFont(new Font("Times New Roman", Font.BOLD, 18));        add(emailField);        // Next Button        next = new JButton("Next");        next.setBounds(100, 370, 120, 25);        next.setBackground(new Color(22, 99, 54));        next.setForeground(Color.WHITE);        next.addActionListener(this);        add(next);        // Back Button        back = new JButton("Back");        back.setBounds(250, 370, 120, 25);        back.setBackground(new Color(22, 99, 54));        back.setForeground(Color.WHITE);        back.addActionListener(this);        add(back);        // Frame Settings        setSize(1000, 500);        setLocation(200, 150);        setUndecorated(true);        setVisible(true);    }    // Method to Validate Email    private boolean isValidEmail(String email) {        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z]{2,7}$";        return email.matches(emailRegex);    }    @Override    public void actionPerformed(ActionEvent e) {        if (e.getSource() == next) {            String name = nameField.getText().trim();            String email = emailField.getText().trim();            if (name.isEmpty() || email.isEmpty()) {                JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);            } else if (!isValidEmail(email)) {                JOptionPane.showMessageDialog(this, "Please enter a valid email address.", "Invalid Email", JOptionPane.ERROR_MESSAGE);            } else {                // Proceed only if saveToDatabase returns true                boolean success = saveToDatabase(name, email);                if (success) {                    setVisible(false);                    new Rules(name);                }            }        } else if (e.getSource() == back) {            System.exit(50);        }    }    // Method to Save Name & Email into Database    private boolean saveToDatabase(String name, String email) {        String checkQuery = "SELECT COUNT(*) FROM users WHERE name = ?";        String insertQuery = "INSERT INTO users (name, email) VALUES (?, ?)";        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {            // Check if the name already exists            try (PreparedStatement checkStatement = connection.prepareStatement(checkQuery)) {                checkStatement.setString(1, name);                ResultSet resultSet = checkStatement.executeQuery();                if (resultSet.next() && resultSet.getInt(1) > 0) {                    JOptionPane.showMessageDialog(this, "This name is already registered. Please choose a different name.",                            "Duplicate Name", JOptionPane.ERROR_MESSAGE);                    return false;                }            }            try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {                insertStatement.setString(1, name);                insertStatement.setString(2, email);                int rowsInserted = insertStatement.executeUpdate();                if (rowsInserted > 0) {                    JOptionPane.showMessageDialog(this, "User saved successfully!");                    return true;                }            }        } catch (SQLException e) {            JOptionPane.showMessageDialog(this, "Error: Unable to connect to the database or save user.\n" + e.getMessage(),                    "Database Error", JOptionPane.ERROR_MESSAGE);            return false;        }        return false;    }    public static void main(String[] args) {        new Login();    }}