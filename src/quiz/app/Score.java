package quiz.app;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.sql.*;import java.util.Properties;import javax.mail.*;import javax.mail.internet.*;public class Score extends JFrame {    // Database credentials    private static final String DB_URL = "jdbc:mysql://localhost:3306/quiz_application";    private static final String DB_USER = "root";    private static final String DB_PASSWORD = "";    // Email credentials    private static final String EMAIL = "your-email-address";    private static final String EMAIL_PASSWORD = "your-email-app-password";    public Score(String name, int score) {        // Image        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/score.png"));        Image i2 = i1.getImage().getScaledInstance(200, 150, Image.SCALE_DEFAULT);        ImageIcon i3 = new ImageIcon(i2);        JLabel image = new JLabel(i3);        image.setBounds(60, 200, 200, 150);        add(image);        // Heading        JLabel heading = new JLabel("Thank you " + name + " for Playing QUIZ Test");        heading.setBounds(100, 80, 700, 30);        heading.setFont(new Font("Tahoma", Font.BOLD, 26));        add(heading);        // Score Label        JLabel scoreLabel = new JLabel("Your Score is " + score);        scoreLabel.setBounds(350, 200, 300, 30);        scoreLabel.setFont(new Font("Tahoma", Font.BOLD, 26));        add(scoreLabel);        // Exit Button        JButton exit = new JButton("EXIT");        exit.setBounds(380, 270, 120, 30);        exit.setBackground(new Color(22, 99, 54));        exit.setForeground(Color.WHITE);        add(exit);        exit.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                sendScoreByEmail(name, score);                setVisible(false);                new Login();            }        });        // Background Image        ImageIcon i11 = new ImageIcon(ClassLoader.getSystemResource("icons/back.png"));        Image i22 = i11.getImage().getScaledInstance(750, 550, Image.SCALE_DEFAULT);        ImageIcon i33 = new ImageIcon(i22);        JLabel imagee = new JLabel(i33);        imagee.setBounds(0, 0, 750, 550);        add(imagee);        // Frame Settings        setSize(750, 550);        setLocation(300, 100);        setLayout(null);        setUndecorated(true);        setVisible(true);    }    // Method to Handle An Email    private void sendScoreByEmail(String name, int score) {        String email = fetchEmailFromDatabase(name);        if (email == null) {            JOptionPane.showMessageDialog(this, "User email not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);            return;        }        // Email setup        String subject = "Your Quiz Score";        String message = "Dear " + name + ",<br><br>" +                "Thank you for participating in the Quiz Test!<br>" +                "Your final score is: <b>" + score + "</b><br><br>" +                "Best regards,<br>" +                "Quiz Application Team";        try {            sendEmail(email, subject, message);            JOptionPane.showMessageDialog(this, "Score has been sent to " + email);        } catch (Exception ex) {            JOptionPane.showMessageDialog(this, "Error sending email: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);        }    }    // Method to Fetch An Email from Database    private String fetchEmailFromDatabase(String name) {        String email = null;        String query = "SELECT email FROM users WHERE name = ?";        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);             PreparedStatement preparedStatement = connection.prepareStatement(query)) {            preparedStatement.setString(1, name);            ResultSet resultSet = preparedStatement.executeQuery();            if (resultSet.next()) {                email = resultSet.getString("email");            }        } catch (SQLException e) {            e.printStackTrace();        }        return email;    }    // Method to send An Email    private void sendEmail(String to, String subject, String body) throws MessagingException {        Properties props = new Properties();        props.put("mail.smtp.host", "smtp.gmail.com");        props.put("mail.smtp.port", "587");        props.put("mail.smtp.auth", "true");        props.put("mail.smtp.starttls.enable", "true");        Session session = Session.getInstance(props, new Authenticator() {            @Override            protected PasswordAuthentication getPasswordAuthentication() {                return new PasswordAuthentication(EMAIL, EMAIL_PASSWORD);            }        });        Message message = new MimeMessage(session);        message.setFrom(new InternetAddress(EMAIL));        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));        message.setSubject(subject);        message.setContent(body, "text/html;charset=UTF-8");        Transport.send(message);        System.out.println("Email sent successfully!");    }    public static void main(String[] args) {        new Score("User", 95);    }}